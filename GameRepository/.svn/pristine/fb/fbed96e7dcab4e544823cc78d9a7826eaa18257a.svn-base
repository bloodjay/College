/***********************************
 *  This class manages the number 
 *  of balls the player has left
 *  and can be change by passing
 *  different values to the constructor
 *
 *
 *  Written by: Zachary Calabrese
 *  Email: zcalabrese22@gmail.com
************************************/

import java.util.*;

import javax.imageio.ImageIO;
import javax.swing.Timer;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.swing.*;

public class Balls extends GameObject implements ActionListener{
	private int current_ball_count;
	private int first_ball_x;
	private int first_ball_y;
	private int ball_size;
	private int original_ball_thrown_radius;
	private int ball_thrown_radius;
	private int width_of_person;
	private int height_of_person;
	private int ball_movement;
	private int original_ball_thrown_movement_x;
	private int ball_thrown_movement_x;
	private int original_ball_thrown_movement_y;
	private int ball_thrown_movement_y;
	private int xPosBallThrown;
	private int ballThrowSpeed;
	private int yPosBallThrown;
	private int ball_slow_down_minimize;
	private Image ball_half;
	private BufferedImage ball_full;
	private BufferedImage ball_full_resizable;
	private Image ball_backing;
	private Image player_1;
	private ImageIcon icon;
	private int max_balls_to_draw;
	private int max_balls_to_be_thrown;
	Timer timer;

	//ActionListener updateProBar;

	// Set the initial starting number of balls
	public Balls(int current_ball_count){
		this.current_ball_count = current_ball_count;
		first_ball_x = 840;
		first_ball_y = 610;
		ball_size = 65;
		max_balls_to_draw = 5; //setting max ball to be drawn the same as the constructor
		width_of_person = 100;
		max_balls_to_be_thrown = max_balls_to_draw + 1;
		height_of_person = 200;
		ball_movement = 0;
		
		ballThrowSpeed = 0;
		original_ball_thrown_radius = 70;
		ball_thrown_radius = original_ball_thrown_radius;
		ball_slow_down_minimize = ball_thrown_radius;
		original_ball_thrown_movement_x = getScreenWidth() / 2 + 20;
		ball_thrown_movement_x = original_ball_thrown_movement_x;
		original_ball_thrown_movement_y = getScreenHeight() / 3 + 200;
		ball_thrown_movement_y = original_ball_thrown_movement_y;
		
		// Image for half-size basketball
		icon = new ImageIcon("ball_images/Ball_half.png");
		ball_half = icon.getImage();
		ball_half = ball_half.getScaledInstance(ball_size, ball_size/2, Image.SCALE_SMOOTH);
		
		// Image for basketball tray
		icon = new ImageIcon("ball_images/basket_fw.png");
		ball_backing = icon.getImage();
		ball_backing = ball_backing.getScaledInstance(355, 75, Image.SCALE_SMOOTH);
		
		// Image for player w/o ball
		icon = new ImageIcon("ball_images/player_1_with_ball.png");
		player_1 = icon.getImage();
		player_1 = player_1.getScaledInstance(width_of_person,height_of_person,Image.SCALE_SMOOTH);
		
		// Image for ball player is holding
		try {
			ball_full = ImageIO.read(new File("ball_images/Ball_full.png"));
		} catch (IOException e) {
		}
		
		
		/*
		icon = new ImageIcon("ball_images/Ball_full.png");
		ball_full = icon.getBufferedImage();
		
		*/
		timer = new Timer(20, this);
		//timer.setInitialDelay(190);
		timer.start();
		/**TIMER WAS NOT NEEDED FOR SIMULATION OF BALL MOVEMENT**/
	}

	// Decrease the number of balls on screen	
	public void ballThrown(int sliderPosition, int yPosBallThrown){
		this.yPosBallThrown = yPosBallThrown;
		Random r;
		r = new Random();
		int Low = 1;
		int High = 3;
		int R = r.nextInt(High-Low) + Low;	
		
		r = new Random();
		Low = 1;
		High = 3;
		int R2 = r.nextInt(High-Low) + Low;
		System.out.println(R);
		System.out.println(R2);
		if(sliderPosition == 1){
			if(R == 1){
				ballThrowSpeed = 2;
			}else{
				ballThrowSpeed = -2;
			}
			setIsItAHit(true);
		}else if(sliderPosition == 2){
			if(R == 1){
				ballThrowSpeed = 3;
			}else{
				ballThrowSpeed = -3;
			}
			setIsItAHit(false);
		}else if(sliderPosition == 3){
			if(R == 1){
				ballThrowSpeed = 3;
			}else{
				ballThrowSpeed = -3;
			}
			if(R2 == 1){
				yPosBallThrown = yPosBallThrown - 15;
			}else{
				yPosBallThrown = yPosBallThrown + 15;
			}
			setIsItAHit(false);
		}else if(sliderPosition == 4){
			if(R == 1){
				ballThrowSpeed = 4;
			}else{
				ballThrowSpeed = -4;
			}
			setIsItAHit(false);
		}else if(sliderPosition == 5){
			if(R == 1){
				ballThrowSpeed = 5;
			}else{
				ballThrowSpeed = -5;
			}
			if(R2 == 1){
				yPosBallThrown = yPosBallThrown - 15;
			}else{
				yPosBallThrown = yPosBallThrown + 15;				
			}
			setIsItAHit(false);
		}								
		
		current_ball_count--;
		ballsThrown++;
		checkIsGameOver();
		System.out.println("current: "+current_ball_count+" balls thrown: "+ballsThrown);
	}
	
	// Increase the number of balls on screen
	// Possible uses: bonus throws, extra throws gained, etc...
	public void ballGained(){
		current_ball_count++;
	}

	public void actionPerformed(ActionEvent e){
		update();
		//checkIsGameOver();
		repaint();
	}
	
	//THIS UPDATE METHOD CONTROLS THE MOVEMENT OF THE BALLS ALONG THE RACK IF THE BOOLEAN CAN WE MOVE IS TRUE
	//WHILE THE BALLS HAVE REACHED ITS NEW DESTINATION WE STOP SET THE CAN WE THROW VALUE TO FALSE
	//SO EACH TIME AN ACTION IS PERFORMED WE CONSTANTLY CHECK THIS METHOD
	public void update(){

		if(!getGameOver())
			if(getBallBeingThrown()){		
				if (ball_thrown_radius != 30)
					if(ball_slow_down_minimize % 2 == 0)
						ball_thrown_radius--;
				
				ball_slow_down_minimize--;
				//ball_full.getScaledInstance(ball_thrown_radius, ball_thrown_radius, Image.SCALE_SMOOTH);
				
				if (ball_thrown_movement_y < yPosBallThrown){
					try {
						Thread.sleep(3000);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					ball_thrown_radius = original_ball_thrown_radius;
					setBallBeingThrown(false);
					setTrusteeDunked(true);
	
					ball_thrown_movement_x = original_ball_thrown_movement_x;
					ball_thrown_movement_y = original_ball_thrown_movement_y;
	
					ball_thrown_movement_y-=2;
					System.out.println("1" + ball_thrown_movement_y);
					System.out.println("2" + yPosBallThrown);
				}else{
					if(ballThrowSpeed < 0)
						ball_thrown_movement_x-=ballThrowSpeed;
					else
						ball_thrown_movement_x+=ballThrowSpeed;
					ball_thrown_movement_y-=2;
				}
		}

		if(!getCanWeThrow() && !getBallBeingThrown()){
			ball_movement--;

			if (ball_movement < (-55 * (ballsThrown))){
				setCanWeThrow(true);
				setTrusteeDunked(false);
			}			
		}
		//checkIsGameOver();
	}
	
	// Draw green background, white box over that, then the balls over that
	public void paint(Graphics g){		
	    Graphics2D g2d = (Graphics2D) g;
	    
		//ball_full_resizable.createGraphics();
		g.drawImage(ball_full, ball_thrown_movement_x, ball_thrown_movement_y, ball_thrown_radius, ball_thrown_radius, null);
	    
	    // Draw person
	    g2d.drawImage(player_1, getScreenWidth()/2 - ball_size/2, getScreenHeight() * 10/16, null);
	    
		// Draw ball box
		g2d.drawImage(ball_backing, first_ball_x - 10, first_ball_y + 16, null);
		
		
		if (getBallBeingThrown()){
			// Draw the number of balls left starting from position 0 and incrementing based on the ball radius
			if (max_balls_to_draw < current_ball_count){
				for(int i = ballsThrown-1; i < max_balls_to_draw; i ++){
					g2d.drawImage(ball_half, first_ball_x + (i*ball_size) + ball_movement, first_ball_y, null);
				}	
			}else{
				for(int i = ballsThrown-1; i < max_balls_to_draw; i ++){
					g2d.drawImage(ball_half, first_ball_x + (i*ball_size) + ball_movement, first_ball_y, null);
				}
			}
		}else{
			// Draw the number of balls left starting from position 0 and incrementing based on the ball radius
			if (max_balls_to_draw < current_ball_count){
				for(int i = ballsThrown; i < max_balls_to_draw; i ++){
					g2d.drawImage(ball_half, first_ball_x + (i*ball_size) + ball_movement, first_ball_y, null);
				}	
			}else{
				for(int i = ballsThrown; i < max_balls_to_draw; i ++){
					g2d.drawImage(ball_half, first_ball_x + (i*ball_size) + ball_movement, first_ball_y, null);
				}
			}	
		}
		
		// End drawing balls left graphic representation
	}

	public void checkIsGameOver(){
		if (max_balls_to_be_thrown == ballsThrown){
			setGameOver();
			System.out.println("inside if statement");
			System.out.println("current: "+current_ball_count+" balls thrown: "+ballsThrown);
			int reply = JOptionPane.showConfirmDialog(null, "No more balls left to throw. Do you want to play again?", "Game Over", JOptionPane.YES_NO_OPTION);
			if (reply == JOptionPane.YES_OPTION) {
			    //Menu mm = new Menu(frame, getScreenWidth(), getScreenHeight());
				//NewPane(mm.MenuLayout());
				//frame.add(new Menu(frame, getScreenWidth(), getScreenHeight()));
			} else {
			    System.exit(0);
			}
		}
	}
}